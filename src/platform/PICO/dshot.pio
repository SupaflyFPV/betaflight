;
; Copyright (c) TODO
;

; DSHOT protocol rate (150, 300, 600) is dynamic
; DSHOT bidir / not bidir is compiled in
; For rate, could have separate programs ready to load in (maybe easiest)
;  or could have effectively dynamic based on contents of x register if spare, which can be
; set with pio_sm_exec_wait_blocking
; For >4 motors, could  configure pin with disable, config set, enable, if blocking
; 

; presumably BF writes dshot async, at max of ~10k/sec or so (typical aiming for 8k loop for gyro)
; dshot frame takes approx. 0.1ms dshot150 or dshot300_bidir
; so hopefully never going to be overflowing the tx fifo (but could happen with 150bidir and be close with 150, 300bidir)


; programs dshot_150, dshot_300, dshot_600, dshot_bidir_150, dshot_bidir_300, dshot_bidir_600
;
; All programs, bit width = 40 cycles, clock set accordingly
; Min delay between frames of 2us, number of cycles varies according to program
;
; DSHOT 600
; 1 bit ~ 1.667us, 2us ~ 48 cycles. Allow say 56 cycles between frames
;

; * could get rid of nop by adding delays to 2x jmp !osre, bitloop
; * maybe get rid of discard by writing 16-bit word (dupllicated to top 16 bits), and osre empty after 16 bits

.program dshot_600
start:
    set    pins, 0                [31]      ; Set pin low [assumed pin already set for output]
    nop                           [20]      ; min delay 2us at DSHOT600 is 48 cycles, allow 56 before next set
    pull   block                            ; Block until someone puts something into the TX FIFO
    out    y, 16                            ; Discard top 16 bits
bitloop:
    out    y, 1                             ; Shift next bit into y
    jmp    !y, outzero                      ;
    set    pins, 1                [29]      ; To output a '1' bit, set high for 30 then low for 10 (based on bitlength = 40 cycles)
    set    pins, 0                [6]       ; Delay to next "set" adds up to 10
    jmp    !osre, bitloop                   ; If not done output (finished shifting bits) the loop
    jmp    start
outzero:
    set    pins, 1                [14]      ; To output a '1', set high for 15 then low for 25
    set    pins, 0                [20]      ; Delay to next "set" adds up to 25
    jmp    !osre, bitloop         [1]       ; If not done output (finished shifting bits) the loop else wrap to start



/*

#if 0 //def TEST_DSHOT_ETC

static const uint16_t dshot_bidir_PIO_instructions[] = {
            //     .wrap_target
    0xe081, //  0: set    pindirs, 1
    0xea00, //  1: set    pins, 0                [10]
    0xe501, //  2: set    pins, 1                [5]
    0xea00, //  3: set    pins, 0                [10]
    0xe501, //  4: set    pins, 1                [5]
    0x0001, //  5: jmp    1
            //     .wrap
};

/*
#if !PICO_NO_HARDWARE
static const struct pio_program blink_program = {
    .instructions = blink_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = blink_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

#define blink_wrap_target 0
#define blink_wrap 5
#define blink_pio_version 0

static inline pio_sm_config blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + blink_wrap_target, offset + blink_wrap);
    return c;
}
*/

