// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// dshot_600 //
// --------- //

#define dshot_600_wrap_target 0
#define dshot_600_wrap 12
#define dshot_600_pio_version 0

static const uint16_t dshot_600_program_instructions[] = {
            //     .wrap_target
    0xff00, //  0: set    pins, 0                [31]
    0xb442, //  1: nop                           [20]
    0x80a0, //  2: pull   block
    0x6050, //  3: out    y, 16
    0x6041, //  4: out    y, 1
    0x006a, //  5: jmp    !y, 10
    0xfd01, //  6: set    pins, 1                [29]
    0xe600, //  7: set    pins, 0                [6]
    0x00e4, //  8: jmp    !osre, 4
    0x0000, //  9: jmp    0
    0xee01, // 10: set    pins, 1                [14]
    0xf400, // 11: set    pins, 0                [20]
    0x01e4, // 12: jmp    !osre, 4               [1]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program dshot_600_program = {
    .instructions = dshot_600_program_instructions,
    .length = 13,
    .origin = -1,
    .pio_version = dshot_600_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config dshot_600_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + dshot_600_wrap_target, offset + dshot_600_wrap);
    return c;
}
#endif

